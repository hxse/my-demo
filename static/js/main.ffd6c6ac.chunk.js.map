{"version":3,"sources":["App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["gamepadIndex","window","addEventListener","e","gp","navigator","getGamepads","gamepad","index","console","log","id","buttons","length","axes","mountDict","text","document","querySelector","setInterval","undefined","forEach","item","buttonIndex","idx","pressed","click","App","React","useState","word","setWord","mouseEnterEvent","event","i","trimEnd","file","setFile","file2","setFile2","chapter","setChapter","setConfig","row","setRow","row2","setRow2","history","setHistory","data","setData","data2","setData2","getData","a","fetch","result","json","currentChapters","Math","max","currentRow","num","language","fileChange","v","reader","FileReader","onload","target","split","readAsText","files","pageTurn","name","way","updateData","refresh","JSON","stringify","api","item0","_row","item1","_row2","i2","mode","res0","res1","useEffect","hr","className","type","onChange","bind","this","map","onMouseEnter","onClick","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById","URL","process","href","origin","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"wKAIIA,E,4GACJC,OAAOC,iBAAiB,oBAAoB,SAAUC,GACpD,IAAIC,EAAKC,UAAUC,cAAcH,EAAEI,QAAQC,OAC3CC,QAAQC,IACN,0DACAN,EAAGI,MACHJ,EAAGO,GACHP,EAAGQ,QAAQC,OACXT,EAAGU,KAAKD,QAEVb,EAAeG,EAAEI,QAAQC,SAG3B,IAAII,EAAU,EAAC,GAAO,GAAO,GAAO,GAAO,GAAO,GA6BlD,SAASG,EAAUC,GACFC,SAASC,cAAc,aA7BxCC,aAAY,gBACWC,IAAjBpB,GACgBK,UAAUC,cAAcN,GAChCY,QAAQS,SAAQ,SAACC,EAAMC,GAS/B,IARA,IAQA,MARe,CACb,CAAC,EAAG,OACJ,CAAC,EAAG,SACJ,CAAC,EAAG,QACJ,CAAC,EAAG,UACJ,CAAC,EAAG,UACJ,CAAC,EAAG,aAEN,eAAgC,CAAC,IAAD,sBAAtBC,EAAsB,KAAjBb,EAAiB,KAC1BY,GAAeC,IACbF,EAAKG,SACa,GAAhBb,EAAQY,IACVP,SAASC,cAAcP,GAAIe,QAE7Bd,EAAQY,IAAO,GAEfZ,EAAQY,IAAO,SAMxB,KAuOYG,MA5Nf,WAAgB,IAAD,SACSC,IAAMC,WADf,mBACRC,EADQ,KACFC,EADE,KAEb,SAASC,EAAgBC,EAAOjB,GAC9BP,QAAQC,IAAIuB,EAAOjB,GACnBe,EAAQE,EAAMC,EAAEC,QAAQ,IAAI,IAAI,MAJrB,MAOOP,IAAMC,WAPb,6BAQbZ,SAASf,iBAAiB,WAAW,SAACC,OARzB,MAcSyB,IAAMC,SAAS,kCAdxB,mBAcRO,EAdQ,KAcFC,EAdE,OAeWT,IAAMC,SAAS,kCAf1B,mBAeRS,EAfQ,KAeDC,EAfC,OAkBeX,IAAMC,WAlBrB,mBAkBRW,EAlBQ,KAkBCC,EAlBD,OAmBab,IAAMC,WAnBnB,mBAmBAa,GAnBA,aAoBOd,IAAMC,WApBb,mBAoBRc,EApBQ,KAoBHC,EApBG,OAqBShB,IAAMC,WArBf,mBAqBRgB,EArBQ,KAqBFC,EArBE,OAsBelB,IAAMC,WAtBrB,mBAsBRkB,EAtBQ,KAsBCC,EAtBD,OAuBSpB,IAAMC,WAvBf,mBAuBRoB,EAvBQ,KAuBFC,EAvBE,OAwBWtB,IAAMC,WAxBjB,mBAwBRsB,EAxBQ,KAwBDC,EAxBC,cA0BEC,IA1BF,8EA0Bb,oCAAAC,EAAA,sEACqBC,MAAM,wCAD3B,cACMC,EADN,gBAEiBA,EAAOC,OAFxB,OAEED,EAFF,OAIEd,EAAUc,GACVf,EAAWe,EAAOE,iBAClBd,EAAOe,KAAKC,IAAL,MAAAD,KAAI,YAAQH,EAAOK,WAAW,MACrCf,EAAQa,KAAKC,IAAL,MAAAD,KAAI,YAAQH,EAAOK,WAAW,MACtCb,EAAWQ,EAAOT,SAEde,EAAMN,EAAOE,gBAVnB,MAWuB,CAAC,UAAW,WAXnC,iDAWWK,EAXX,eAYmBR,MAAM,6BAAD,OAA8BQ,EAA9B,YAA0CD,IAZlE,eAYIN,EAZJ,iBAamBA,EAAOC,OAb1B,QAaID,EAbJ,YAcYO,EAdZ,OAeW,YAfX,QAsBW,YAtBX,gCAgBQ1B,EAAQmB,GACRZ,GAAO,SAACV,GAEN,OADAgB,EAAQM,EAAOtB,IACRA,KAnBjB,oCAuBQK,EAASiB,GACTV,GAAQ,SAACZ,GAGP,OAFAkB,EAASI,EAAOtB,IAChBnB,EAAUyC,EAAOtB,IACVA,KA3BjB,8FA1Ba,sBAgEb,SAAS8B,GAAWC,EAAGhC,GAErB,IAAIiC,EAAS,IAAIC,WACjBD,EAAOE,OAAS,SAAUnC,GACxB,IAAMjB,EAAOiB,EAAMoC,OAAOb,OAAOc,MAAM,MACvC,OAAQL,GACN,KAAK,EACH5B,EAAQrB,GACR,MACF,KAAK,EACHuB,EAASvB,KAIfkD,EAAOK,WAAWtC,EAAMoC,OAAOG,MAAM,IAEvC,SAASC,GAASC,EAAMC,EAAK1C,GAC3B,IAAI4B,EAAa,CAAC,CAAClB,GAAM,CAACE,IADQ,SAEnB+B,EAFmB,gFAElC,WAA0B1C,EAAG2C,GAA7B,mBAAAvB,EAAA,6DACML,EAAO6B,KAAKC,UAAU7C,GACtB8C,EAFN,yDAE8D/B,GAF9D,SAGqBM,MAAMyB,GAH3B,cAGMxB,EAHN,gBAIiBA,EAAOC,OAJxB,OAIED,EAJF,OAKMqB,GACFxB,IANJ,4CAFkC,sBAYlC,SAAS4B,IACP,IAAIC,EAAOP,EAAMhC,EAAM,EAAIA,EAAM,EAGjC,OAFAC,EAAOsC,GACPhC,EAAQd,EAAK8C,IACTA,GAAQ9C,EAAKvB,OACR,OAELqE,EAAO,EACF,QAETrB,EAAW,GAAK,CAACqB,QACjBxC,GAAU,SAACR,GAGT,OADA0C,EADA1C,EAAC,2BAAQA,GAAR,IAAW2B,WAAYA,KAEjB3B,MAGX,SAASiD,IACP,IAAIC,EAAQT,EAAM9B,EAAO,EAAIA,EAAO,EAIpC,OAHAC,EAAQsC,GACRhC,EAASd,EAAM8C,IACfrE,EAAUuB,EAAM8C,IACZA,GAAS9C,EAAMzB,OACV,OAELuE,EAAQ,EACH,QAETvB,EAAW,GAAK,CAACuB,QACjB1C,GAAU,SAAC2C,GAGT,OADAT,EADAS,EAAE,2BAAQA,GAAR,IAAYxB,WAAYA,KAEnBwB,MAGX,SAAS7C,EAAQ8C,GACf5C,GAAU,SAACR,GACT,IAAIwB,EAA0B,MAAR4B,EAAepD,EAAEwB,gBAAkB,EAAIxB,EAAEwB,gBAAkB,EAGjF,OADAkB,EADA1C,EAAC,2BAAQA,GAAR,IAAWwB,gBAAiBA,EAAiBG,WAAY,CAAC,CAAC,GAAI,CAAC,OACnD,GACP3B,KAGX,OAAQwC,GACN,IAAK,MACH,IAAIa,EAAON,IACPO,EAAOL,IACC,QAARI,GAA0B,QAARC,GACpBhD,EAAQ,MAEE,QAAR+C,GAA0B,QAARC,GACpBhD,EAAQ,QAEV,MACF,KAAK,EACHyC,IACA,MACF,KAAK,EACHE,IACA,MACF,IAAK,YACH3C,EAAQ,MACR,MACF,IAAK,cACHA,EAAQ,SAjGdiD,qBAAU,WACRpC,IACA5C,QAAQC,IAAI,oCACX,IAkGH,IAAIgF,GAAK,oBAAIC,UAAU,aACvB,OACE,qBAAKA,UAAU,MAAf,SACE,eAAC,IAAD,CAAUA,UAAU,YAApB,UACE,sBAAKA,UAAU,OAAf,UACE,uBAAOC,KAAK,OAAOjF,GAAG,QAAQkF,SAAU7B,GAAW8B,KAAKC,KAAM,KAC9D,uBAAOH,KAAK,OAAOjF,GAAG,SAASkF,SAAU7B,GAAW8B,KAAKC,KAAM,QAEjE,yCACIvD,EADJ,WACgBG,EADhB,WACwBE,EADxB,WACiCE,EAAUA,EAAQ,GAAG,GAAG,GAAG,QAAK3B,EAC/D,oBAAIuE,UAAU,oBAEhB,sBAAKhF,GAAG,SAASgF,UAAU,UAA3B,UACE,sBAAKhF,GAAG,WAAR,UACGwC,EACGA,EAAMmB,MAAM,KAAK0B,KAAI,SAAC9D,GAAD,OACnB,uBAAM+D,aAAcjE,EAAgB8D,KAAK,EAAM,CAAE5D,MAAjD,UACGA,EAAG,eAGRd,EACHsE,MAEH,sBAAK/E,GAAG,WAAR,UACGsC,EACAyC,MAEH,qBAAK/E,GAAG,YAAR,SAAqBmB,OAEvB,sBAAK6D,UAAU,SAAf,UACE,wBAAQhF,GAAG,KAAKuF,QAASzB,GAASqB,KAAKC,KAAM,EAAG,GAAhD,qBAGA,wBAAQpF,GAAG,OAAOuF,QAASzB,GAASqB,KAAKC,KAAM,EAAG,GAAlD,qBAGA,wBAAQpF,GAAG,MAAMuF,QAASzB,GAASqB,KAAKC,KAAM,EAAG,GAAjD,qBAGA,wBAAQpF,GAAG,QAAQuF,QAASzB,GAASqB,KAAKC,KAAM,EAAG,GAAnD,qBAGA,wBAAQpF,GAAG,QAAQuF,QAASzB,GAASqB,KAAKC,KAAM,MAAO,GAAvD,0BAGA,wBAAQpF,GAAG,UAAUuF,QAASzB,GAASqB,KAAKC,KAAM,MAAO,GAAzD,0BAGA,wBAAQpF,GAAG,YAAYuF,QAASzB,GAASqB,KAAKC,KAAM,YAAa,GAAjE,0BAGA,wBAAQpF,GAAG,cAAcuF,QAASzB,GAASqB,KAAKC,KAAM,cAAe,GAArE,mCC9PJI,EAAcC,QACW,cAA7BnG,OAAOoG,SAASC,UAEe,UAA7BrG,OAAOoG,SAASC,UAEhBrG,OAAOoG,SAASC,SAASC,MAAM,2DAqCnC,SAASC,EAAgBC,EAAOC,GAC9BrG,UAAUsG,cACPC,SAASH,GACTI,MAAK,SAACC,GACLA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACf9G,UAAUsG,cAAcS,YAI1B3G,QAAQC,IACN,+GAKEgG,GAAUA,EAAOW,UACnBX,EAAOW,SAASP,KAMlBrG,QAAQC,IAAI,sCAGRgG,GAAUA,EAAOY,WACnBZ,EAAOY,UAAUR,WAO5BS,OAAM,SAACC,GACN/G,QAAQ+G,MAAM,4CAA6CA,MC9FjE,IAYeC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBd,MAAK,YAAkD,IAA/Ce,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFlH,SAASmH,eAAe,SFSnB,SAAkB1B,GACvB,GAA6C,kBAAmBrG,UAAW,CAGzE,GADkB,IAAIgI,IAAIC,IAAwBrI,OAAOoG,SAASkC,MACpDC,SAAWvI,OAAOoG,SAASmC,OAIvC,OAGFvI,OAAOC,iBAAiB,QAAQ,WAC9B,IAAMuG,EAAK,UAAM6B,IAAN,sBAEPnC,IAgEV,SAAiCM,EAAOC,GAEtCnD,MAAMkD,EAAO,CACXgC,QAAS,CAAE,iBAAkB,YAE5B5B,MAAK,SAAC6B,GAEL,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CzI,UAAUsG,cAAcoC,MAAMlC,MAAK,SAACC,GAClCA,EAAakC,aAAanC,MAAK,WAC7B5G,OAAOoG,SAAS4C,eAKpBzC,EAAgBC,EAAOC,MAG1Ba,OAAM,WACL9G,QAAQC,IAAI,oEAtFVwI,CAAwBzC,EAAOC,GAI/BrG,UAAUsG,cAAcoC,MAAMlC,MAAK,WACjCpG,QAAQC,IACN,+GAMJ8F,EAAgBC,EAAOC,OE/B/ByC,GAKA1B,M","file":"static/js/main.ffd6c6ac.chunk.js","sourcesContent":["import React, { useEffect } from \"react\";\nimport \"./App.css\";\nimport Div100vh from \"react-div-100vh\";\n\nlet gamepadIndex;\nwindow.addEventListener(\"gamepadconnected\", function (e) {\n  let gp = navigator.getGamepads()[e.gamepad.index];\n  console.log(\n    \"Gamepad connected at index %d: %s. %d buttons, %d axes.\",\n    gp.index,\n    gp.id,\n    gp.buttons.length,\n    gp.axes.length\n  );\n  gamepadIndex = e.gamepad.index;\n});\n\nlet buttons = [false, false, false, false, false, false];\nsetInterval(() => {\n  if (gamepadIndex !== undefined) {\n    const myGamepad = navigator.getGamepads()[gamepadIndex];\n    myGamepad.buttons.forEach((item, buttonIndex) => {\n      let keyBinds = [\n        [0, \"#up\"], //A\n        [1, \"#down\"], //B\n        [2, \"#up2\"], //X\n        [3, \"#down2\"], //Y\n        [4, \"#upAll\"], //R\n        [5, \"#downAll\"], //L\n      ];\n      for (let [idx, id] of keyBinds) {\n        if (buttonIndex == idx) {\n          if (item.pressed) {\n            if (buttons[idx] == false) {\n              document.querySelector(id).click();\n            }\n            buttons[idx] = true;\n          } else {\n            buttons[idx] = false;\n          }\n        }\n      }\n    });\n  }\n}, 100);\n\nfunction mountDict(text) {\n  let content1 = document.querySelector(\"#content1\");\n  // content1.textContent=text\n  // let textArr = text.split(' ')\n  // for (let word of textArr) {\n  //   let wordSpan = <span>{word}</span>\n  //   content1.appendChild(wordSpan)\n  // }\n}\nfunction App() {\n  let [word, setWord] = React.useState();\n  function mouseEnterEvent(event, text) {\n    console.log(event, text);\n    setWord(event.i.trimEnd(' ',',','.'));\n  }\n\n  let [key, setKey] = React.useState();\n  document.addEventListener(\"keydown\", (e) => {\n    // console.log(\"按下按键\", e);\n  });\n\n  // let [button, setButton] = React.useState();\n\n  let [file, setFile] = React.useState(\"请输入文件\");\n  let [file2, setFile2] = React.useState(\"请输入文件\");\n  // let [color, setColor] = React.useState('');\n\n  let [chapter, setChapter] = React.useState();\n  let [config, setConfig] = React.useState();\n  let [row, setRow] = React.useState();\n  let [row2, setRow2] = React.useState();\n  let [history, setHistory] = React.useState();\n  let [data, setData] = React.useState();\n  let [data2, setData2] = React.useState();\n\n  async function getData() {\n    let result = await fetch(\"http://127.0.0.1:8000/config/get/ATG\");\n    result = await result.json();\n    // console.log(result);\n    setConfig(result);\n    setChapter(result.currentChapters);\n    setRow(Math.max(...result.currentRow[0]));\n    setRow2(Math.max(...result.currentRow[1]));\n    setHistory(result.history);\n\n    let num = result.currentChapters;\n    for (let language of [\"chinese\", \"english\"]) {\n      result = await fetch(`http://127.0.0.1:8000/ATG/${language}/${num}`);\n      result = await result.json();\n      switch (language) {\n        case \"chinese\":\n          setFile(result);\n          setRow((i) => {\n            setData(result[i]);\n            return i;\n          });\n          break;\n        case \"english\":\n          setFile2(result);\n          setRow2((i) => {\n            setData2(result[i]);\n            mountDict(result[i]);\n            return i;\n          });\n          break;\n      }\n    }\n  }\n  useEffect(() => {\n    getData();\n    console.log(\"初始化运行\");\n  }, []);\n\n  function fileChange(v, event) {\n    // 读取文件:\n    let reader = new FileReader();\n    reader.onload = function (event) {\n      const text = event.target.result.split(\"\\n\");\n      switch (v) {\n        case 0:\n          setFile(text);\n          break;\n        case 1:\n          setFile2(text);\n          break;\n      }\n    };\n    reader.readAsText(event.target.files[0]);\n  }\n  function pageTurn(name, way, event) {\n    let currentRow = [[row], [row2]];\n    async function updateData(i, refresh) {\n      let data = JSON.stringify(i);\n      let api = `http://127.0.0.1:8000/config/update/ATG?config=${data}`;\n      let result = await fetch(api);\n      result = await result.json();\n      if (refresh) {\n        getData();\n      }\n    }\n\n    function item0() {\n      let _row = way ? row + 1 : row - 1;\n      setRow(_row);\n      setData(file[_row]);\n      if (_row >= file.length) {\n        return \"over\";\n      }\n      if (_row < 0) {\n        return \"pass\";\n      }\n      currentRow[0] = [_row];\n      setConfig((i) => {\n        i = { ...i, currentRow: currentRow };\n        updateData(i);\n        return i;\n      });\n    }\n    function item1() {\n      let _row2 = way ? row2 + 1 : row2 - 1;\n      setRow2(_row2);\n      setData2(file2[_row2]);\n      mountDict(file2[_row2]);\n      if (_row2 >= file2.length) {\n        return \"over\";\n      }\n      if (_row2 < 0) {\n        return \"pass\";\n      }\n      currentRow[1] = [_row2];\n      setConfig((i2) => {\n        i2 = { ...i2, currentRow: currentRow };\n        updateData(i2);\n        return i2;\n      });\n    }\n    function chapter(mode) {\n      setConfig((i) => {\n        let currentChapters = mode == \"up\" ? i.currentChapters - 1 : i.currentChapters + 1;\n        i = { ...i, currentChapters: currentChapters, currentRow: [[0], [0]] };\n        updateData(i, true);\n        return i;\n      });\n    }\n    switch (name) {\n      case \"all\":\n        let res0 = item0();\n        let res1 = item1();\n        if (res0 == \"pass\" && res1 == \"pass\") {\n          chapter(\"up\");\n        }\n        if (res0 == \"over\" && res1 == \"over\") {\n          chapter(\"down\");\n        }\n        break;\n      case 0:\n        item0();\n        break;\n      case 1:\n        item1();\n        break;\n      case \"chapterUp\":\n        chapter(\"up\");\n        break;\n      case \"chapterDown\":\n        chapter(\"down\");\n        break;\n    }\n  }\n  let hr = <hr className=\"hr-twill\" />;\n  return (\n    <div className=\"App\">\n      <Div100vh className=\"container\">\n        <div className=\"file\">\n          <input type=\"file\" id=\"input\" onChange={fileChange.bind(this, 0)} />\n          <input type=\"file\" id=\"input2\" onChange={fileChange.bind(this, 1)} />\n        </div>\n        <div>\n          第{chapter}章, {row}行, {row2}行, {history ? history[1][0][0][1] : undefined}\n          <hr className=\"hr-edge-weak\" />\n        </div>\n        <div id=\"reader\" className=\"content\">\n          <div id=\"content1\">\n            {data2\n              ? data2.split(\" \").map((i) => (\n                  <span onMouseEnter={mouseEnterEvent.bind(this, { i })}>\n                    {i}{\" \"}\n                  </span>\n                ))\n              : undefined}\n            {hr}\n          </div>\n          <div id=\"content2\">\n            {data}\n            {hr}\n          </div>\n          <div id=\"translate\">{word}</div>\n        </div>\n        <div className=\"footer\">\n          <button id=\"up\" onClick={pageTurn.bind(this, 0, 0)}>\n            上0\n          </button>\n          <button id=\"down\" onClick={pageTurn.bind(this, 0, 1)}>\n            下0\n          </button>\n          <button id=\"up2\" onClick={pageTurn.bind(this, 1, 0)}>\n            上1\n          </button>\n          <button id=\"down2\" onClick={pageTurn.bind(this, 1, 1)}>\n            下1\n          </button>\n          <button id=\"upAll\" onClick={pageTurn.bind(this, \"all\", 0)}>\n            上全\n          </button>\n          <button id=\"downAll\" onClick={pageTurn.bind(this, \"all\", 1)}>\n            下全\n          </button>\n          <button id=\"chapterUp\" onClick={pageTurn.bind(this, \"chapterUp\", 0)}>\n            上章\n          </button>\n          <button id=\"chapterDown\" onClick={pageTurn.bind(this, \"chapterDown\", 1)}>\n            下章\n          </button>\n        </div>\n      </Div100vh>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}